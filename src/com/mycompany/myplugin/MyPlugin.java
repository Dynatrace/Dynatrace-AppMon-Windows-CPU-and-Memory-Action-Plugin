
 /**
  * This template file was generated by dynaTrace client.
  * The dynaTrace community portal can be found here: http://community.dynatrace.com/
  * For information how to publish a plugin please visit http://community.dynatrace.com/plugins/contribute/
  **/ 

package com.mycompany.myplugin;

import com.dynatrace.diagnostics.pdk.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Collection;
import java.util.logging.Logger;
import java.util.logging.Level;
import org.apache.commons.lang.StringUtils;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;



import com.mycompany.myplugin.sendMessage;


public class MyPlugin implements Action {

	private static final Logger log = Logger.getLogger(MyPlugin.class.getName());
	private static final String CONFIG_EMAIL_TO = "To";
	private static final String CONFIG_EMAIL_FROM = "From";
	private static final String CONFIG_EMAIL_SUBJECT = "Subject";
	private static final String CONFIG_USER = "User";
	private static final String CONFIG_PASS = "Pass";
	private static final String CONFIG_MAIL_SERVER = "MailServer";
	private static final String CONFIG_MAIL_PORT = "MailPort";
	private static final String CONFIG_TYPE = "Type";
	
	@Override
	public Status setup(ActionEnvironment env) throws Exception {
		// TODO
		return new Status(Status.StatusCode.Success);
	}

	@Override
	public Status execute(ActionEnvironment env) throws Exception {
		// TODO
		log.log(Level.WARNING, "Start");
		Collection<Incident> incidents = env.getIncidents();
		for (Incident i : incidents) {
			log.log(Level.WARNING, "Incident");
			Collection<Violation> violations = i.getViolations();
			for (Violation v : violations) {
				log.log(Level.WARNING, "Violation");
				String sMeasure = v.getViolatedMeasure().getName();
				log.info("Measure: " + v.getViolatedMeasure().getName());
				String NewMeasureNoChar = "";
				String NewMeasureWithChar = "";
                if(sMeasure.contains("@")){
                      NewMeasureWithChar = sMeasure;
                      log.info("NewMeasure: " + NewMeasureWithChar);
                }
                else{
                      NewMeasureNoChar = sMeasure;
                      log.info("NewMeasure: " + NewMeasureNoChar);
                }
                
                log.info("NewMeasureWithChar: " + NewMeasureWithChar);
                String sNewMeasure = StringUtils.substringBetween(NewMeasureWithChar, "@", ".com") + ".com";
                log.info(sNewMeasure);
                String sourceCIDSC = sNewMeasure;

				String typer = env.getConfigString(CONFIG_TYPE);
				String[] command = {"D:/dynaTrace/PSTools/pslist.exe","-s","2","-r","1", "\\\\" + sourceCIDSC, "-accepteula", "-u", env.getConfigString(CONFIG_USER), "-p", env.getConfigPassword(CONFIG_PASS)};
				String[] command2 = {"D:/dynaTrace/PSTools/pslist.exe","-s","2","-r","1", "\\\\" + sourceCIDSC, "-accepteula", "-u", env.getConfigString(CONFIG_USER), "-p", env.getConfigPassword(CONFIG_PASS), "-m"};
				String inputstream = "";
				String line = "";
				log.log(Level.WARNING, Arrays.toString(command));
				
				try {
				Runtime rt = Runtime.getRuntime();
				Process execute;
				if(typer.equals("CPU"))
				{
					execute = rt.exec(command);
				}
				else
				{
					execute = rt.exec(command2);
				}
				log.log(Level.WARNING,"Execute Command");
				BufferedReader BR = new BufferedReader(new InputStreamReader(execute.getInputStream()));
				log.log(Level.WARNING,"started Read");
				while ((line = BR.readLine()) != null){
					inputstream += line + ";";
					log.log(Level.WARNING,line);
					}
				execute.destroy();
				}
				catch (Throwable t) {
					t.printStackTrace();
				}
				
				DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");
				Calendar cal = Calendar.getInstance();
				
				String messagetext = "";
				
				String[] inputdiv = inputstream.split("(;)");
				for(int p=0; p<inputdiv.length; p++)
				{
					if(inputdiv[p].contains(sourceCIDSC))
					{
						messagetext = inputdiv[p] + "\n";
					}
					else
					{
						messagetext += inputdiv[p] + "\n";
					}
				}
				
				log.log(Level.WARNING, messagetext);
				String[] Params = new String[6];
				Params[0] = env.getConfigString(CONFIG_EMAIL_TO);
				Params[1] = env.getConfigString(CONFIG_EMAIL_FROM);
				Params[2] = sourceCIDSC + " High " + typer + " @ " + dateFormat.format(cal.getTime()) + env.getConfigString(CONFIG_EMAIL_SUBJECT);
				Params[3] = messagetext;
				Params[4] = env.getConfigString(CONFIG_MAIL_SERVER);
				Params[5] = env.getConfigString(CONFIG_MAIL_PORT);
				int worked = 0;
				if(!(sourceCIDSC.equals("null.com")))
				{
					worked = sendMessage.sendIt(Params);
				}
				log.log(Level.WARNING, Integer.toString(worked));
			}
		}
		return new Status(Status.StatusCode.Success);
	}
@Override
	public void teardown(ActionEnvironment env) throws Exception {
		// TODO
	}
}
